import random
import re
import monsters
import encounter_tables
from bisect import bisect_left
from monsters import cr_dict 
monsters_dict = {}




## Issues to adress:
## The generator mostly makes 1-5 enemy encounters, sometimes 6, need to look over the generator to see if I can increase the spread
## formating of the text output, and inclusion of total xp, xp per parymember, and also adjusted xp for referance in it's own line
##  maybe with an option in the advanced section to include this. 



# These are the base for the semantic part of the encounter generator, increase the number of "Monster" for more encounters
Attitude = ["friendly", "cautious", "indifferent", "hostile", "threatening"]
Need_Want = ["Food", "Mate", "Shiny things", "Slaves", "Territory", "Home", "Religious sacrifice", "status/trophies", "kicks/fun"]
Complication = ["Secretive", "Monster", "Monster", "Monster", "Monster", "Wounded", "Insane", "Controlled", "Supernatural", 
                "Trapped", "Frenzied", "with children", "Pregnant", "with prisoner", "with treasure", "Diseased", "Running", 
                "Hiding", "Lost"]
# Use this for only monster vs monster encounters: 
# Complication = ["Monster"]


class Monster:
    """Class used to rename values in the monsters.cr_dict dictionary."""
    def __init__(self, name, manpage, cr, xp, size, monster_type):
        self.name = name
        self.manpage = manpage
        self.cr = cr
        self.xp = xp
        self.size = size
        self.monster_type = monster_type

  

def xp_budget(party_size, party_level, difficulty):
    """Function which takes the party size, average party level, and desired difficulty to return the correct XP budget
    within the encounter_table dictionary.
    """
    if party_level > 20 or party_level < 1 or party_size < 1:
        raise ValueError('Party level should be between 1 and 20, while party size should be 1 or greater.')
    return (encounter_tables.xp_difficulties[difficulty][party_level - 1]) * party_size


def xp_list_gen(xp):
    """Function to find factors of the XP budget integer. Returns a random factor,
    so long as that factor pairing is < 21. This keeps the number of monsters manageable.
    """
    xp_factors = [i for i in range(10, xp + 1) if xp % i == 0]
    random_gen_factor = 0
    while random_gen_factor == 0 or (xp / random_gen_factor) > 20:
        random_gen_factor = random.choice(xp_factors)
    return random_gen_factor

def rnd_select_monster(xp, monster_type, input_monster_dict):
    """Function to return a randomly selected monster for an encounter that have the XP nearest the xp
    value input without going over. First checks to see if monster_type filter is set or not then
    pulls random monster from the monsters_dict dictionary.
    """
    if monster_type == 'all':
        nearest_monster_xp = min(list_monster_xp(input_monster_dict, xp), key=lambda x: abs(x - xp))
        monster_selections = [key for key in input_monster_dict if input_monster_dict[key].xp == nearest_monster_xp]
        output_monster = random.choice(monster_selections)
        return output_monster
    else:
        monster_type_dict = {key for key in input_monster_dict if input_monster_dict[key].monster_type == monster_type.capitalize()}
        nearest_monster_xp = min([input_monster_dict[key].xp for key in monster_type_dict if input_monster_dict[key].xp <= xp], key=lambda x: abs(x - xp))
        monster_selections = [key for key in monster_type_dict if input_monster_dict[key].xp == nearest_monster_xp and input_monster_dict[key].monster_type == monster_type.capitalize()]
        output_monster = random.choice(monster_selections)
        return output_monster
    

def list_monster_xp(input_monster_dict, xp):
    monster_xp_list = []
    for key in input_monster_dict:
        if input_monster_dict[key].xp <= xp:
            monster_xp_list.append(input_monster_dict[key].xp)
    return monster_xp_list



def build_encounter_size(party_size, monster_xp, xp):
    """Function returns number of monsters in encounter based on previous function outputs.
    The number of monsters depends upon the party size, and xp budget.
    """
    monster_count = [1, 2, 6, 10, 14]
    encounter_multiplier = [1.0, 0.67, 0.50, 0.40, 0.33, 0.25]
    num_monsters = xp // monster_xp
    # Use monster_count table to find correct index in encounter_multiplier.
    index_table = bisect_left(monster_count, num_monsters)
    if party_size <= 2 and index_table != len(encounter_multiplier) - 1:
        index_table += 1
    if num_monsters == 1:
        return num_monsters
    return int(num_monsters * encounter_multiplier[index_table])  # number, xp value


def get_user_input_str(prompt, default_choice, choices=None):
    """Function returns a string based on input with exception check, so long as the input is one of a few choices."""
    result = None
    while result is None:
        val = input(prompt).lower()
        if val == '':
            result = default_choice
        elif val == 'help':
            print('You need to select one of these {0}'.format(choices,))        
        elif choices and val not in choices:
            print(' Error: must choose one: {0}'.format(choices,))
        else:
            result = val
    return result


def get_user_input_int(prompt):
    """Function returns an integer based on input with exception checking."""
    result = None
    while result is None:
        try:
            result = int(input(prompt))
        except ValueError:
            print(' Not an integer, user numbers! ')
    return result


def get_user_input_vars():
    """Function grabs user input and returns formatted output for encounter building.
    User input selection is: Prompt text, default option, list of choices."""
    print('Type "help" to see what choices there are for a variable, the Default choice has a [Box] around it, leave the imput black to use the Default')
    party_size_input = get_user_input_int('Party size?> ')
    party_level_input = get_user_input_int('Party average level?> ')
    advanced_input =get_user_input_str('Would you like [simple] or advanced encounter generation?', default_choice='simple', choices=['simple', 'advanced'])
    if advanced_input == ('advanced'):
        difficulty_input = get_user_input_str('Select difficulty:\nEasy, [Medium], Hard, or Deadly> ', default_choice='medium', choices=['easy', 'medium', 'hard', 'deadly'])
        monster_type = get_user_input_str("Select monster type:'?' [All]> ", default_choice='all', choices=encounter_tables.monster_types_list)
        number_of_encounters_input = get_user_input_int('number of encounters?')
    else:
        difficulty_input = ('medium')
        monster_type = ('all')
        number_of_encounters_input = get_user_input_int('number of encounters?')
    return party_size_input, party_level_input, difficulty_input, monster_type, number_of_encounters_input


## This creates a new encounter each time it is run based on the imput from the user

def encounter_generator(current_encounter):
    encounter_xp = xp_budget(current_encounter[0], current_encounter[1], current_encounter[2])
    xp_per_monster = xp_list_gen(encounter_xp)
    output_monster = rnd_select_monster(xp_per_monster, current_encounter[3], monsters_dict)
    output_encounter = build_encounter_size(current_encounter[0], monsters_dict[output_monster].xp, encounter_xp)    
    total_xp = output_encounter * xp_per_monster
    party_member_xp = (total_xp // current_encounter[0])
    monster = ('{0} {1}'.format(output_encounter, output_monster), ('Monster Manual page: {0}, the individual monster xp is {1}, and the total xp is {2}, Each of the party members should get {3} xp for this encounter'.format(monsters_dict[output_monster].manpage, xp_per_monster, total_xp, party_member_xp)))
    return monster


# This generates the num number of encounter promts, if the encounter complication is a 
# monster it selects a monster from the table and a attitude aswell.
def start():
    current_encounter = get_user_input_vars()
    script_repeat = 'y'
    num = current_encounter[4]
    
# This takes the number of encounters selected and runs the party size and level and seeks a suitable encounter.
    while script_repeat == 'y' or script_repeat == 'yes':
        print('Randomized encounter based on:\nParty Size: {0}\nParty Level: {1}\nDifficulty: {2} \nNumber of encounters: {3}'.format(current_encounter[0], 
              current_encounter[1], current_encounter[2], current_encounter[4]))        
        for _ in range(num):
            complication = random.choice(Complication)
            if complication == "Monster":
                ## This creates two monster encounters since the complication is monster
                ## This is the first encounter
                monster = encounter_generator(current_encounter)
                
                ## This is the second encounter
                monster2 = encounter_generator(current_encounter)
                complication = random.choice(Attitude), monster2[0]  
                
                ## This prints the encounter
                encounter = "There are ", monster[0], " that are ", random.choice(Attitude), ", they seek ", random.choice(Need_Want), ", but there are ", complication, ".", '\n' "The ", monster[0], " can be found in ", monster[1], '\n' "In addition the ", monster2[0], " can be found on ", monster2[1], '\n'
                encounter = ''.join([str(element) for element in encounter])
                encounter = re.sub(r"[-\"#@;():'<>{}=~|.?]", "", encounter)
                print(encounter)   
                          
            else:  
                ## This creates the encounter if there is no monster complication
                monster = encounter_generator(current_encounter)
                
                encounter = "There are ", monster[0], " that are ", random.choice(Attitude), ", they seek ", random.choice(Need_Want), ", but they are ", complication, ".", '\n', "The ", monster[0], " can be found in ", monster[1], '\n'
                encounter = ''.join([str(element) for element in encounter])
                encounter = re.sub(r"[-\"#@;():'<>{}=~|.?]", "", encounter)
                print(encounter)
        script_repeat = get_user_input_str('Run again? Y/N\n[Y]> ', default_choice='y', choices=['y', 'yes', 'n', 'no'])
        

#initialized the program
def main():
    for key in monsters.cr_dict:
        monsters_dict[key] = Monster(key, *monsters.cr_dict[key])

    start()

# runs the script
if __name__ == '__main__':
    main()